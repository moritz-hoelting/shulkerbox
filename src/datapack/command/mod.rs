//! Represents a command that can be included in a function.

mod execute;

pub use execute::{Condition, Execute};

use chksum_md5 as md5;

use crate::util::compile::{CompileOptions, FunctionCompilerState, MutCompilerState};

use super::Function;

/// Represents a command that can be included in a function.
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Debug, Clone)]
pub enum Command {
    /// A command that is already formatted as a string.
    Raw(String),
    /// Message to be printed only in debug mode
    Debug(String),
    /// Execute command
    Execute(Execute),
    /// Group of commands to be called instantly after each other
    Group(Vec<Command>),
    /// Comment to be added to the function
    Comment(String),
}

impl Command {
    /// Create a new raw command.
    #[must_use]
    pub fn raw(command: &str) -> Self {
        Self::Raw(command.to_string())
    }

    /// Compile the command into a string.
    pub fn compile(
        &self,
        options: &CompileOptions,
        global_state: &MutCompilerState,
        function_state: &FunctionCompilerState,
    ) -> Vec<String> {
        match self {
            Self::Raw(command) => vec![command.clone()],
            Self::Debug(message) => compile_debug(message, options),
            Self::Execute(ex) => ex.compile(options, global_state, function_state),
            Self::Group(commands) => compile_group(commands, options, global_state, function_state),
            Self::Comment(comment) => vec!["#".to_string() + comment],
        }
    }

    /// Get the count of the commands this command will compile into.
    #[must_use]
    fn get_count(&self, options: &CompileOptions) -> usize {
        match self {
            Self::Comment(_) => 0,
            Self::Debug(_) => usize::from(options.debug),
            Self::Raw(cmd) => cmd.split('\n').count(),
            Self::Execute(ex) => ex.get_count(options),
            Self::Group(_) => 1,
        }
    }
}

impl From<&str> for Command {
    fn from(command: &str) -> Self {
        Self::raw(command)
    }
}
impl From<&Function> for Command {
    fn from(value: &Function) -> Self {
        Self::Raw(format!("function {}:{}", value.namespace(), value.name()))
    }
}
impl From<&mut Function> for Command {
    fn from(value: &mut Function) -> Self {
        Self::Raw(format!("function {}:{}", value.namespace(), value.name()))
    }
}

fn compile_debug(message: &str, option: &CompileOptions) -> Vec<String> {
    if option.debug {
        vec![format!(
            r#"tellraw @a [{{"text":"[","color":"dark_blue"}},{{"text":"DEBUG","color":"dark_green","hoverEvent":{{"action":"show_text","value":[{{"text":"Debug message generated by Shulkerbox"}},{{"text":"\nSet debug message to 'false' to disable"}}]}}}},{{"text":"]","color":"dark_blue"}},{{"text":" {}","color":"black"}}]"#,
            message
        )]
    } else {
        Vec::new()
    }
}

#[tracing::instrument(skip_all, fields(commands = ?commands))]
fn compile_group(
    commands: &[Command],
    options: &CompileOptions,
    global_state: &MutCompilerState,
    function_state: &FunctionCompilerState,
) -> Vec<String> {
    let command_count = commands
        .iter()
        .map(|cmd| cmd.get_count(options))
        .sum::<usize>();
    if command_count > 1 {
        let uid = function_state.request_uid();

        let function_path = {
            let function_path = function_state.path();
            let function_path = function_path.strip_prefix("sb/").unwrap_or(function_path);

            let pre_hash_path = function_path.to_owned() + ":" + &uid.to_string();
            let hash = md5::hash(pre_hash_path).to_hex_lowercase();

            "sb/".to_string() + function_path + "/" + &hash[..16]
        };

        let namespace = function_state.namespace();

        let mut function = Function::new(namespace, &function_path);
        function.get_commands_mut().extend(commands.iter().cloned());
        function_state.add_function(&function_path, function);

        vec![format!("function {namespace}:{function_path}")]
    } else {
        commands
            .iter()
            .flat_map(|cmd| cmd.compile(options, global_state, function_state))
            .collect::<Vec<_>>()
    }
}
