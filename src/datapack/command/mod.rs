//! Represents a command that can be included in a function.

mod execute;
pub use execute::Execute;

use serde::{Deserialize, Serialize};

use crate::util::compile::{CompileOptions, MutCompilerState, MutFunctionCompilerState};

/// Represents a command that can be included in a function.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum Command {
    /// A command that is already formatted as a string.
    Raw(String),
    /// Message to be printed only in debug mode
    Debug(String),
    /// Execute command
    Execute(Execute),
}

impl Command {
    /// Create a new raw command.
    pub fn raw(command: &str) -> Self {
        Self::Raw(command.to_string())
    }

    /// Compile the command into a string.
    pub fn compile(
        &self,
        options: &CompileOptions,
        global_state: &MutCompilerState,
        function_state: &MutFunctionCompilerState,
    ) -> String {
        let _ = options;
        let _ = global_state;
        let _ = function_state;
        match self {
            Self::Raw(command) => command.clone(),
            Self::Debug(message) => compile_debug(message, options),
            Self::Execute(_) => todo!(),
        }
    }
}

impl From<&str> for Command {
    fn from(command: &str) -> Self {
        Self::raw(command)
    }
}

fn compile_debug(message: &str, option: &CompileOptions) -> String {
    if option.debug {
        format!(
            r#"tellraw @a [{{"text":"[","color":"dark_blue"}},{{"text":"DEBUG","color":"dark_green","hoverEvent":{{"action":"show_text","value":[{{"text":"Debug message generated by Shulkerbox"}},{{"text":"\nSet debug message to 'false' to disable"}}]}}}},{{"text":"]","color":"dark_blue"}},{{"text":" {}","color":"black"}}]"#,
            message
        )
    } else {
        String::new()
    }
}
